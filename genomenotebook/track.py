# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/API/01_track.ipynb.

# %% auto 0
__all__ = ['Track']

# %% ../nbs/API/01_track.ipynb 5
from fastcore.basics import *

from bokeh.plotting import figure

from bokeh.models import (
    CustomJS,
    ColumnDataSource,
    NumeralTickFormatter,
    Range1d,
)

from .javascript import track_callback_code

import pandas as pd


try: #pyBigWig cannot be installed on Windows
    import pyBigWig
except ImportError:
    pyBigWig = None
    
import warnings



# %% ../nbs/API/01_track.ipynb 8
class Track:
    """ Track objects should only be created through GenomeBrowser.add_track """
    def __init__(self,
                 height: int = 200, #size of the track
                 tools: str = "xwheel_zoom, ywheel_zoom, pan, box_zoom, save, reset", #comma separated list of Bokeh tools that can be used to navigate the plot
                 output_backend="webgl",
                 **kwargs,
                ):        
        self.height = height

        #ensuring that the active_scroll tool is part of the tools list 
        if "xwheel_zoom" not in [t.strip() for t in tools.split(',')]:
            tools+=", xwheel_zoom"

        self.fig = figure(tools=tools,
                          active_scroll="xwheel_zoom",
                          height=height,
                          y_axis_location="right", #this is required in order to keep a proper alignment with the sequence
                          output_backend=output_backend,
                          **kwargs)
        self.fig.xaxis[0].formatter = NumeralTickFormatter(format="0,0")
        self.track_loaded_data = None
        self.track_all_data = None
        self.loaded_range = None
        
        


# %% ../nbs/API/01_track.ipynb 13
@patch
def _set_track_data_source(self:Track, data, pos, columns):
    columns=[c for c in columns if c] #some arguments can be None => remove them
    data=data.loc[(self.bounds[0] < data[pos]) & (data[pos] < self.bounds[1]),
                  [pos]+columns].copy()
    data=data.sort_values(pos)
    if len(data)>10**5:
        warnings.warn("You are trying to plot more than 10^5 glyphs, this might crash your memory. \
        Consider using bounds or reducing the number of datapoints.")

    y=columns[0]
    ymin = data[y].values.min()
    ymax = data[y].values.max()
    self.fig.y_range=Range1d(ymin,ymax,
                             bounds=(ymin,ymax))
        
    self.all_data=ColumnDataSource(data)
    self.loaded_data=ColumnDataSource(
        data.loc[(self.loaded_range.data["start"][0] < data[pos]
                 ) & (
                 data[pos] < self.loaded_range.data["end"][0])]
    )
    
    xcb = CustomJS(
            args = {
                "x_range": self.fig.x_range,
                "all_data":self.all_data,
                "loaded_data": self.loaded_data,
                "track_loaded_range":self.loaded_range,
            },
            code = track_callback_code
        )

    self.fig.x_range.js_on_change('start', xcb)


# %% ../nbs/API/01_track.ipynb 14
@patch
def line(self:Track,
         data: pd.DataFrame, #pandas DataFrame containing the data
         pos: str, #name of the column containing the positions along the genome
         y: str, #name of the column containing the data to be plotted on the y-axis
         **kwargs #enables to pass keyword arguments used by the Bokeh function
        ):
    self._set_track_data_source(data, pos, columns=[y])
    self.fig.line(source=self.loaded_data, x=pos, y=y, **kwargs)


# %% ../nbs/API/01_track.ipynb 17
from bokeh.transform import factor_cmap

# %% ../nbs/API/01_track.ipynb 18
@patch
def scatter(self:Track,
         data: pd.DataFrame, #pandas DataFrame containing the data
         pos: str, #name of the column containing the positions along the genome
         y: str, #name of the column containing the data to be plotted on the y-axis
         factors: str = None, #name of a column of values to be used as factors
         **kwargs, #enables to pass keyword arguments used by the Bokeh function
        ):
    self._set_track_data_source(data, pos, columns=[y,factors])
    
    if factors!=None:
        color=factor_cmap(factors,"Category10_10",tuple(set(data[factors].values)))
        
        self.fig.scatter(source=self.loaded_data, x=pos, y=y, color=color, legend_group=factors, **kwargs)
        
        self.fig.legend.title = factors
        self.fig.legend.location = "top_left"
    else:
        self.fig.scatter(source=self.loaded_data, x=pos, y=y, **kwargs)


# %% ../nbs/API/01_track.ipynb 23
@patch
def bar(self:Track,
         data: pd.DataFrame, #pandas DataFrame containing the data
         pos: str, #name of the column containing the positions along the genome
         y: str, #name of the column containing the data to be plotted on the y-axis
         factors: str = None, #name of a column of values to be used as factors
         **kwargs, #enables to pass keyword arguments used by the Bokeh function
        ):
    self._set_track_data_source(data, pos, columns=[y,factors])
    
    if factors!=None:
        color=factor_cmap(factors,"Category10_3",tuple(set(data[factors].values)))
        
        self.fig.vbar(source=self.loaded_data, x=pos, top=y, color=color, legend_group=factors, **kwargs)

        self.fig.legend.location = "top_left"
        self.fig.legend.title = factors
    else:
        self.fig.vbar(source=self.loaded_data, x=pos, top=y, **kwargs)
        
