[
  {
    "objectID": "exporting plots.html",
    "href": "exporting plots.html",
    "title": "Exporting plots",
    "section": "",
    "text": "You can save the current view of a plot using the interactive save tool from Bokeh. Depending on the size of your plot you might need to click on the three little dots to see the tool in the menu.\nYou can also save plots programmatically using the GenomeBrowser.save function. Note that this function will only save the initial version of the plot and not the current view.\nSaving plots to .svg or .png requires selenium and geckodriver. Please refer to the Bokeh documentation in case of problem.",
    "crumbs": [
      "Exporting plots"
    ]
  },
  {
    "objectID": "exporting plots.html#saving-to-svg",
    "href": "exporting plots.html#saving-to-svg",
    "title": "Exporting plots",
    "section": "Saving to svg",
    "text": "Saving to svg\nWhen mutliple tracks are displayed, an individual svg file will be saved for each track, as well as a combined svg file.\n\nimport genomenotebook as gn\nimport os\nimport pandas as pd\n\n\ndata_path = gn.get_example_data_dir()\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\n\ndata=pd.DataFrame(dict(x=np.arange(0,5000,100),\n                       y=np.sin(np.arange(0,5000,100))))\n\ng=gn.GenomeBrowser(gff_path=gff_path, \n                bounds=(0,5000),\n                search=False)\n\ntrack = g.add_track(height=100)\ntrack.scatter(data=data, pos=\"x\", y=\"y\")\ng.show()\ng.save(\"test.svg\")",
    "crumbs": [
      "Exporting plots"
    ]
  },
  {
    "objectID": "exporting plots.html#saving-to-png",
    "href": "exporting plots.html#saving-to-png",
    "title": "Exporting plots",
    "section": "Saving to png",
    "text": "Saving to png\nYou can increase the height and width to obtain a better resolution.\n\ng=gn.GenomeBrowser(gff_path=gff_path,\n                   bounds=(0,5000),\n                   search=False,\n                   height=200,\n                   width=2000,\n                   label_font_size=\"20pt\")\ng.save(\"test.png\")",
    "crumbs": [
      "Exporting plots"
    ]
  },
  {
    "objectID": "exporting plots.html#saving-to-html",
    "href": "exporting plots.html#saving-to-html",
    "title": "Exporting plots",
    "section": "Saving to html",
    "text": "Saving to html\nYou can save a plot as an interactive html file\n\ng=gn.GenomeBrowser(gff_path=gff_path,\n                   bounds=(0,5000),\n                   search=False,\n                   height=200,\n                   width=500,\n                   label_font_size=\"20pt\")\ng.save_html(\"test.html\", title=\"interactive graph\")",
    "crumbs": [
      "Exporting plots"
    ]
  },
  {
    "objectID": "stacking.html",
    "href": "stacking.html",
    "title": "Multi genbank and stacking",
    "section": "",
    "text": "import genomenotebook as gn\nimport os",
    "crumbs": [
      "Multi genbank and stacking"
    ]
  },
  {
    "objectID": "stacking.html#plotting-a-linked-stack-of-contigs",
    "href": "stacking.html#plotting-a-linked-stack-of-contigs",
    "title": "Multi genbank and stacking",
    "section": "Plotting a linked stack of contigs",
    "text": "Plotting a linked stack of contigs\ncolored_genbank.gb is a genbank file with four identical contigs. Plotting the contigs as a GenomeStack links the x-axes.\n\ndata_path = gn.get_example_data_dir()\ngb_path = os.path.join(data_path, \"colored_genbank.gb\")\ng = gn.GenomeStack.from_genbank(gb_path,\n                                width=700, \n                                show_seq=True, \n                                search=False, \n                                feature_types=[\"CDS\", \"Domainator\"], \n                                color_attribute=\"Color\", \n                                label_angle=0, \n                                show_labels=True, \n                                feature_height=0.15, \n                                label_vertical_offset=-0.15, \n                                label_justify=\"left\", \n                                label_horizontal_offset = 5, \n                                glyphs=gn.get_default_glyphs(box_colors=(\"Cyan\",)), \n                                feature_name={\"CDS\":\"gene_id\",\"Domainator\":\"name\"},\n                                z_stack=True) \ng.show()",
    "crumbs": [
      "Multi genbank and stacking"
    ]
  },
  {
    "objectID": "stacking.html#additional-examples-of-plotting-stacks-of-contigs",
    "href": "stacking.html#additional-examples-of-plotting-stacks-of-contigs",
    "title": "Multi genbank and stacking",
    "section": "Additional examples of plotting stacks of contigs",
    "text": "Additional examples of plotting stacks of contigs\n\ndata_path = gn.get_example_data_dir()\ngb_path = os.path.join(data_path, \"MT_nbs.gb\")\ng = gn.GenomeStack.from_genbank(gb_path,\n                                width=700, \n                                show_seq=True, \n                                search=False, \n                                feature_types=[\"source\", \"CDS\", \"Domainator\", \"Domain_Search\"], \n                                color_attribute=\"Color\", \n                                label_angle=0, \n                                show_labels=True, \n                                feature_height=0.15, \n                                label_vertical_offset=-0.15, \n                                label_justify=\"left\", \n                                label_horizontal_offset = 5, \n                                glyphs=gn.get_default_glyphs(arrow_colors=(\"grey\",), box_colors=(\"Cyan\",)), \n                                feature_name={\"CDS\":\"gene_id\",\"Domainator\":\"name\", \"Domain_Search\":\"name\"},\n                                z_stack=True) #, \"Domainator\", \"Domain_Search\"\ng.show()",
    "crumbs": [
      "Multi genbank and stacking"
    ]
  },
  {
    "objectID": "API/glyphs.html",
    "href": "API/glyphs.html",
    "title": "glyphs",
    "section": "",
    "text": "source\n\nGlyph\n\n Glyph (glyph_type:str='arrow', colors:tuple=('purple', 'orange'),\n        alpha:float=0.8, show_name:bool=True, name_attr:str='gene',\n        height:float=1)\n\nA class used to define the different types of glyphs shown for different feature types.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nglyph_type\nstr\narrow\ntype of the Glyph (arrow or box)\n\n\ncolors\ntuple\n(‘purple’, ‘orange’)\ncan be a single color or a tuple of two colors, one for each strand\n\n\nalpha\nfloat\n0.8\ntransparency\n\n\nshow_name\nbool\nTrue\n\n\n\nname_attr\nstr\ngene\ndefault attribute to use as the name of the feature to be displayed\n\n\nheight\nfloat\n1\nheight of the feature relative to other features (between 0 and 1)\n\n\n\n\nsource\n\n\nget_default_glyphs\n\n get_default_glyphs (arrow_colors=('purple', 'orange'),\n                     box_colors=('grey',))\n\n*Returns a dictionnary with:\n\nkeys: feature types (str)\nvalues: a Glyph object*\n\n\ndefault_glyphs['CDS']\n\nGlyph object with attributes:\n    glyph_type: arrow\n    colors: ('purple', 'orange')\n    height: 1\n    alpha: 0.8\n    show_name: True\n    name_attr: gene\n\n\n\nsource\n\n\nget_patch_coordinates\n\n get_patch_coordinates (feature, glyphs_dict, feature_height=0.15,\n                        color_attribute=None)\n\n\ndata_path = get_example_data_dir()\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\nfeatures=parse_gff(gff_path, \n                   feature_types=default_types, \n                   seq_id=\"U00096.3\")[0]\n\nfeatures.head().apply(get_patch_coordinates, glyphs_dict=default_glyphs, axis=1)\n\n0    (((190, 190, 190, 255, 190), (0.05, 0.2, 0.2, ...\n1    (((337, 337, 2699, 2799, 2699), (0.05, 0.2, 0....\n2    (((2801, 2801, 3633, 3733, 3633), (0.05, 0.2, ...\n3    (((3734, 3734, 4920, 5020, 4920), (0.05, 0.2, ...\n4    (((5234, 5234, 5430, 5530, 5430), (0.05, 0.2, ...\ndtype: object\n\n\n\nsource\n\n\nhtml_wordwrap\n\n html_wordwrap (input_string:str, line_len=50, start=0)\n\n\n_format_attribute(\"test\",\"'UniProtKB/Swiss-Prot:P0AF03,NCBI_GP:AAC73120.1,ASAP:ABE-0000030,ECOCYC:EG11511,EcoGene:EG11511'\")\n\n'&lt;span style=\"color:DodgerBlue\"&gt;test&lt;/span&gt;&lt;span&gt;: &#x27;UniProtKB/Swiss-Prot:P0AF03,NCBI_GP:AAC73120&lt;br&gt;.1,ASAP:ABE-0000030,ECOCYC:EG11511,EcoGene:EG11511&&lt;br&gt;#x27;&lt;/span&gt;'\n\n\n\nsource\n\n\nget_tooltip\n\n get_tooltip (feature, attributes, wrap=50)\n\n\nfeatures.apply(lambda row: get_tooltip(row, default_attributes),\n                             axis=1)[0]\n\n'&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;span style=\"color:DodgerBlue\"&gt;gene&lt;/span&gt;&lt;span&gt;: thrL&lt;/span&gt;&lt;br&gt;&lt;span style=\"color:DodgerBlue\"&gt;locus_tag&lt;/span&gt;&lt;span&gt;: b0001&lt;/span&gt;&lt;br&gt;&lt;span style=\"color:DodgerBlue\"&gt;product&lt;/span&gt;&lt;span&gt;: thr operon leader peptide&lt;/span&gt;'\n\n\n\nfeatures.attributes[10]\n\nOrderedDict([('ID', 'cds-AAC73120.1'),\n             ('Parent', 'gene-b0009'),\n             ('Dbxref',\n              'UniProtKB/Swiss-Prot:P0AF03,NCBI_GP:AAC73120.1,ASAP:ABE-0000030,ECOCYC:EG11511,EcoGene:EG11511'),\n             ('Name', 'AAC73120.1'),\n             ('gbkey', 'CDS'),\n             ('gene', 'mog'),\n             ('locus_tag', 'b0009'),\n             ('orig_transcript_id', 'gnl|b0009|mrna.b0009'),\n             ('product', 'molybdopterin adenylyltransferase'),\n             ('protein_id', 'AAC73120.1'),\n             ('transl_table', '11')])\n\n\n\nsource\n\n\nget_feature_name\n\n get_feature_name (row, glyphs_dict)\n\nFor each row of features DataFrame uses the Glyph object provided in the glyphs_dict to know which attribute to use as the name\n\nfeatures.head().apply(get_feature_name, glyphs_dict=default_glyphs, axis=1)\n\n0    thrL\n1    thrA\n2    thrB\n3    thrC\n4    yaaX\ndtype: object\n\n\n\n#hide\ngl=default_glyphs.copy()\ngl[\"CDS\"].name_attr=\"locus_tag\"\nassert features.head().apply(get_feature_name, glyphs_dict=gl, axis=1)[0]==\"b0001\"\nassert features.loc[features.type==\"repeat_region\"].head().apply(get_feature_name, glyphs_dict=default_glyphs, axis=1).values[0]==''\n\n\n#hide\ngl[\"rRNA\"]=Glyph(glyph_type=\"box\", \n                        colors=\"red\", \n                        height=0.5,\n                        name_attr=\"locus_tag\",\n                        show_name=True)\n\nprint(gl[\"rRNA\"])\nfeatures.loc[features.type==\"rRNA\"].head().apply(get_feature_name, glyphs_dict=gl, axis=1)\n\nGlyph object with attributes:\n    glyph_type: box\n    colors: ('red',)\n    height: 0.5\n    alpha: 0.8\n    show_name: True\n    name_attr: locus_tag\n\n\n\n235     b0201\n238     b0204\n239     b0205\n3061    b2588\n3062    b2589\ndtype: object\n\n\n\nsource\n\n\nget_feature_patches\n\n get_feature_patches (features:pandas.core.frame.DataFrame, left:int,\n                      right:int, glyphs_dict:dict,\n                      attributes:dict=defaultdict(&lt;function &lt;lambda&gt; at\n                      0x7f05849add80&gt;, {'CDS': ['gene', 'locus_tag',\n                      'product']}), feature_height:float=0.15,\n                      label_vertical_offset:float=0.05,\n                      label_justify:str='center',\n                      color_attribute:str=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfeatures\nDataFrame\n\nDataFrame of the features\n\n\nleft\nint\n\nleft limit\n\n\nright\nint\n\nright limit\n\n\nglyphs_dict\ndict\n\na dictionary of glyphs to use for each feature type\n\n\nattributes\ndict\ndefaultdict(&lt;function  at 0x7f05849add80&gt;, {‘CDS’: [‘gene’, ‘locus_tag’, ‘product’]})\ndictionary with feature type as keys and a list of attributes to display when hovering as values\n\n\nfeature_height\nfloat\n0.15\nfraction of the annotation track height occupied by the features\n\n\nlabel_vertical_offset\nfloat\n0.05\n\n\n\nlabel_justify\nstr\ncenter\n\n\n\ncolor_attribute\nstr\nNone\n\n\n\nReturns\nDataFrame\n\n\n\n\n\n\npatches=get_feature_patches(features,8000,12000, glyphs_dict=default_glyphs)\npatches\n\n\n\n\n\n\n\n\nnames\nxs\nys\nxbox_min\ncolor\nalpha\npos\nattributes\ntype\nlabel_y\nlabel_x\n\n\n\n\n9\nb0008\n(8238, 8238, 9091, 9191, 9091)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n8238\npurple\n0.8\n8714.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.25\n8714.5\n\n\n10\nb0009\n(9306, 9306, 9793, 9893, 9793)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n9306\npurple\n0.8\n9599.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.25\n9599.5\n\n\n11\nb0010\n(10494, 10494, 10028, 9928, 10028)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n10028\norange\n0.8\n10211.0\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.25\n10211.0\n\n\n12\nb0011\n(11356, 11356, 10743, 10643, 10743)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n10743\norange\n0.8\n10999.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.25\n10999.5\n\n\n13\nb0012\n(10830, 10830, 11215, 11315, 11215)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n10830\npurple\n0.8\n11072.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.25\n11072.5\n\n\n14\nb0013\n(11786, 11786, 11482, 11382, 11482)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n11482\norange\n0.8\n11584.0\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.25\n11584.0",
    "crumbs": [
      "API",
      "glyphs"
    ]
  },
  {
    "objectID": "API/track.html",
    "href": "API/track.html",
    "title": "track",
    "section": "",
    "text": "source\n\nTrack\n\n Track (ylim:tuple=None, height:int=200, tools:str='xwheel_zoom,\n        ywheel_zoom, pan, box_zoom, save, reset', **kwargs)\n\nTrack objects should only be created through GenomeBrowser.add_track\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nylim\ntuple\nNone\nlimits of the y axis. If not specified, ylim will be set automatically with the max and min of the data plotted with Track.line, Track.scatter or Track.bar\n\n\nheight\nint\n200\nsize of the track\n\n\ntools\nstr\nxwheel_zoom, ywheel_zoom, pan, box_zoom, save, reset\ncomma separated list of Bokeh tools that can be used to navigate the plot\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\nAdding a track with random points as a demonstration. genomeNotebook uses the Bokeh library and track.fig is a simple Bokeh figure on which you can plot anything you want using Bokeh.\n\nfrom genomenotebook.browser import GenomeBrowser\nfrom genomenotebook.data import get_example_data_dir\nimport os\nimport numpy as np\n\n\ndata_path = get_example_data_dir()\nfasta_path = os.path.join(data_path, \"MG1655_U00096.fasta\")\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\n\n\nsource\n\n\nTrack.set_figure_data_source\n\n Track.set_figure_data_source (fig, pos, loaded_range)\n\n\nsource\n\n\nTrack.set_track_data_source\n\n Track.set_track_data_source (data:pandas.core.frame.DataFrame, pos,\n                              columns:List[str])\n\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nDataFrame\ndata to be plotted\n\n\npos\n\n\n\n\ncolumns\nList\ncolumns to store as data\n\n\n\n\nsource\n\n\nTrack.line\n\n Track.line (data:pandas.core.frame.DataFrame, pos:str, y:str,\n             hover_data:List[str]=None, **kwargs)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndata\nDataFrame\n\npandas DataFrame containing the data\n\n\npos\nstr\n\nname of the column containing the positions along the genome\n\n\ny\nstr\n\nname of the column containing the data to be plotted on the y-axis\n\n\nhover_data\nList\nNone\nlist of column names to be shown when hovering over the data\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\nAdditional kwargs are passed as is to bokeh.plotting.figure.line\n\nPlotting some ChIP-seq data\n\ng=GenomeBrowser(fasta_path=fasta_path, \n                gff_path=gff_path, \n                init_pos=50000,\n                bounds=(30000,85000), \n                search=False, \n                show_seq=False)\n\n#Importing some coverage data from a BigWig file\nbw_file_path=os.path.join(data_path,\"ChIP-ACCCA-1.bw\")\nrefname='NC_000913'\nwith pyBigWig.open(bw_file_path) as bw:\n    cov=bw.values(refname,0,g.seq_len,numpy=True)\n    \ndata=pd.DataFrame({\"pos\": np.arange(0,g.seq_len,10),\n                     \"cov\": cov[::10]})\n\ntrack=g.add_track()\ntrack.line(data,pos=\"pos\",y=\"cov\", \n           line_color=\"blue\",\n           line_width=2)\n\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\nsource\n\n\n\nTrack.scatter\n\n Track.scatter (data:pandas.core.frame.DataFrame, pos:str, y:str,\n                factors:str=None, hover_data:List=None, **kwargs)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndata\nDataFrame\n\npandas DataFrame containing the data\n\n\npos\nstr\n\nname of the column containing the positions along the genome\n\n\ny\nstr\n\nname of the column containing the data to be plotted on the y-axis\n\n\nfactors\nstr\nNone\nname of a column of values to be used as factors\n\n\nhover_data\nList\nNone\nlist of additional column names to be shown when hovering over the data\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\nAdditional kwargs are passed as is to bokeh.plotting.figure.scatter\n\nPlotting some CRISPR screen data\n\nimport pandas as pd\n\n\n#Opening the Cui 2018 CRISPRi screen data\ncui2018data=\"https://gitlab.pasteur.fr/dbikard/badSeed_public/raw/master/screen_data.csv\"\ncui2018data=pd.read_csv(cui2018data)\ncui2018data.head()\n\n\n\n\n\n\n\n\nguide\ngene\nessential\npos\nori\ncoding\nfit18\nfit75\nntargets\nseq\n\n\n\n\n0\nAAAAAACCTGCTGGTGAGGC\nNaN\nNaN\n2202483\n-\nNaN\n-4.850012\n-1.437546\n1\nAAAGCAGATCACAGTAAATAAAAAAACCTGCTGGTGAGGCAGGTTC...\n\n\n1\nAAAAAACGTATTCGCTTGCA\ncurA\nFalse\n1517891\n+\nFalse\n-0.094026\n-0.100313\n1\nTGTTGATGGCTACAGTGCTGAAAAAACGTATTCGCTTGCAAGGTTT...\n\n\n2\nAAAAAAGCGCACTTTTTGAC\nNaN\nNaN\n1919717\n+\nNaN\n-1.109310\n-0.246740\n1\nGTAACGCCTGACAGCGCACAAAAAAAGCGCACTTTTTGACTGGCAC...\n\n\n3\nAAAAAAGCGGTGACTTACGA\nbglA\nFalse\n3042929\n+\nFalse\n-1.328831\n-0.905068\n1\nGCGCCCATATCGAAGAGATGAAAAAAGCGGTGACTTACGATGGCGT...\n\n\n4\nAAAAAATCTGCCCGTGTCGT\ngyrA\nTrue\n2337231\n-\nFalse\n-0.840373\n-0.598858\n1\nATGACTGGAACAAAGCCTATAAAAAATCTGCCCGTGTCGTTGGTGA...\n\n\n\n\n\n\n\n\ng=GenomeBrowser(fasta_path=fasta_path, gff_path=gff_path, bounds=(0,100000), search=False, show_seq=False)\n\ntrack=g.add_track(height=150)\ntrack.scatter(data=cui2018data,pos=\"pos\",y=\"fit75\",factors=\"ori\", hover_data=[\"guide\"])\n\ntrack2=g.add_track(height=150)\ntrack2.scatter(data=cui2018data,pos=\"pos\",y=\"fit18\",factors=\"ori\")\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\nsource\n\n\n\nTrack.bar\n\n Track.bar (data:pandas.core.frame.DataFrame, pos:str, y:str,\n            factors:str=None, hover_data:List=None, **kwargs)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndata\nDataFrame\n\npandas DataFrame containing the data\n\n\npos\nstr\n\nname of the column containing the positions along the genome\n\n\ny\nstr\n\nname of the column containing the data to be plotted on the y-axis\n\n\nfactors\nstr\nNone\nname of a column of values to be used as factors\n\n\nhover_data\nList\nNone\nlist of additional column names to be shown when hovering over the data\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\nAdditional kwargs are passed as is to bokeh.plotting.figure.vbar\nShowing the same data as vertical bars\n\ng=GenomeBrowser(fasta_path=fasta_path, gff_path=gff_path, bounds=(0,100000))\ntrack=g.add_track()\ntrack.bar(data=cui2018data,pos=\"pos\",y=\"fit75\",factors=\"ori\")\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\nsource\n\n\nTrack.custom\n\n Track.custom (func:Callable=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfunc\nCallable\nNone\nfunction to be called. First argument is the figure\n\n\n\n\ng=GenomeBrowser(gff_path=gff_path, bounds=(0,100000), search=False)\ntrack = g.add_track()\n\nx= np.arange(0,100000,100)\ny= np.random.randint(0,10,size=x.shape)\ntrack.custom(lambda fig: fig.scatter(x=x,y=y))\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\nsource\n\n\nTrack.highlight\n\n Track.highlight (data:pandas.core.frame.DataFrame=None,\n                  left_col:str='left', right_col:str='right',\n                  color_col:str='color', alpha_col:str='alpha', left=None,\n                  right=None, color='green', alpha:str=0.2,\n                  hover_data:List[str]=None, **kwargs)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndata\nDataFrame\nNone\npandas DataFrame containing the data\n\n\nleft_col\nstr\nleft\nname of the column containing the start positions of the regions\n\n\nright_col\nstr\nright\nname of the column containing the end positions of the regions\n\n\ncolor_col\nstr\ncolor\nname of the column containing color of the regions\n\n\nalpha_col\nstr\nalpha\nname of the column containing alpha of the regions\n\n\nleft\nNoneType\nNone\n\n\n\nright\nNoneType\nNone\n\n\n\ncolor\nstr\ngreen\n\n\n\nalpha\nstr\n0.2\ntransparency\n\n\nhover_data\nList\nNone\nlist of additional column names to be shown when hovering over the data\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\nAdditional kwargs are passed as is to bokeh.models.Rect\n\ng=GenomeBrowser(fasta_path=fasta_path, gff_path=gff_path, bounds=(0,10000), search=False)\ntrack=g.add_track()\ntrack.scatter(data=cui2018data,pos=\"pos\",y=\"fit75\",factors=\"ori\")\nhighlight_regions=pd.DataFrame({\"left\": [5000, 8000], \"right\": [6000, 8500], \"color\": [\"red\",\"green\"]})\ntrack.highlight(data=highlight_regions, left_col=\"left\", right_col=\"right\", color_col=\"color\")\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\ng=GenomeBrowser(fasta_path=fasta_path, gff_path=gff_path, bounds=(0,10000), search=False)\ntrack=g.add_track()\ntrack.scatter(data=cui2018data,pos=\"pos\",y=\"fit75\",factors=\"ori\")\n\nhighlight_regions=pd.DataFrame({\"left\": [5000, 8000], \"right\": [6000, 8500], \"color\": [\"red\",\"green\"]})\n\ng.highlight(data=highlight_regions, left=\"left\", right=\"right\", color=\"color\", highlight_tracks=True)\ng.show()",
    "crumbs": [
      "API",
      "track"
    ]
  },
  {
    "objectID": "API/plot.html",
    "href": "API/plot.html",
    "title": "plot",
    "section": "",
    "text": "source\n\nGenomePlot\n\n GenomePlot (browsers:Union[ForwardRef('GenomeBrowser'),List[ForwardRef('G\n             enomeBrowser')]], output_backend:str='webgl')\n\nA GenomePlot object is created to handle all the rendering logic of GenomeBrowser objects. An empty figure is created upon initialization. Glyphs, sequence and search boxes are then added when calling GenomePlot._collect_elements.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nbrowsers\nUnion\n\na GenomeBrowser object or list of GenomeBrowser objects when a GenomeStack is rendered\n\n\noutput_backend\nstr\nwebgl\ncan be “webgl” or “svg”. webgl is more efficient but svg is a vectorial format that can be conveniently modified using other software\n\n\n\n\ng=GenomeBrowser(gff_path=gff_path, fasta_path=fasta_path, bounds=(0,500000))\nplot = GenomePlot(g)\nplot._get_browser_elements()\nseqsearch = plot._get_sequence_search()\nbk_show(column(seqsearch,column(plot.elements)))\n\n\n  \n\n\n\n\n\n\ng=GenomeBrowser(gff_path=gff_path, fasta_path=fasta_path, bounds=(0,500000))\nplot = GenomePlot(g)\nplot._collect_elements()\nbk_show(column(plot.elements))",
    "crumbs": [
      "API",
      "plot"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "GenomeNotebook (1.0.0)",
    "section": "",
    "text": "A genome browser in your Jupyter notebook",
    "crumbs": [
      "Install"
    ]
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "GenomeNotebook (1.0.0)",
    "section": "Install",
    "text": "Install\npip install genomenotebook\n\nUpgrade\nNew versions of genomenotebook are released on a regular basis. Make sure to upgrade your installation to enjoy all the features.\npip install genomenotebook --upgrade",
    "crumbs": [
      "Install"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "GenomeNotebook (1.0.0)",
    "section": "How to use",
    "text": "How to use\nCreate a simple genome browser with a search bar. The sequence appears when zooming in.\n\nimport genomenotebook as gn\n\n\ng=gn.GenomeBrowser(gb_path=path_to_gb_file, \n                   init_pos=10000,\n                   attributes=[\"gene\",\"product\",\"locus_tag\"], #chose attributes to display among the ones available in your genbank file\n                   )\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\nUsing GFF and fasta formats\n\ng=gn.GenomeBrowser(gff_path=gff_path, \n                   fasta_path=fasta_path, \n                   init_pos=10000,\n                   )\ng.show()\n\n\n\n\n\n\n\n\n  \n\n\n\n\n\nTracks can be added to visualize your favorite genomics data. See Examples for more !!!!",
    "crumbs": [
      "Install"
    ]
  },
  {
    "objectID": "index.html#contributing-to-genomenotebook",
    "href": "index.html#contributing-to-genomenotebook",
    "title": "GenomeNotebook (1.0.0)",
    "section": "Contributing to GenomeNotebook",
    "text": "Contributing to GenomeNotebook\nGenomeNotebook is developed using the nbdev framework, which makes it easy to develop Python packages with Jupyter Notebooks.\n\nSetting up a Fork\n\n1. Fork the Repository\n\nNavigate to the GenomeNotebook GitHub repository.\nClick the “Fork” button in the top-right corner to create your own copy of the repository.\n\n\n\n2. Clone Your Fork\nClone your forked repository to your local machine by running the following command in your terminal: bash git clone https://github.com/&lt;your-username&gt;/genomenotebook.git\nNavigate to the cloned directory: bash cd genomenotebook\n\n\n3. Set Up Upstream Remote\nTo keep your fork updated with the original repository:\nAdd the upstream repository: bash git remote add upstream https://github.com/dbikard/genomenotebook.git\nVerify the remotes: bash git remote -v\nYou should see origin pointing to your fork and upstream pointing to the original repository.\n\n\n\nSetting Up the Development Environment\n\nCreate a virtual environment and activate it\n\nconda create -n gn python=3.11\nconda activate gn\n\nInstall Required Tools\n\nIt is a good idea to read the nbdev Getting Started Guide and End-To-End Walkthrough\npip install jupyterlab\npip install nbdev\nnbdev_install_quarto\npip install jupyterlab-quarto\nnbdev_install_hooks\n\nInstall dependecies and genomenotebook in editable mode\n\npip install -e '.[dev]'\n\n\nMaking Changes\n\nSync with Upstream Repository Before making changes, ensure your fork is up-to-date:\n\ngit fetch upstream\ngit checkout main\ngit merge upstream/main\n\nCreate a New Branch\n\ngit checkout -b &lt;feature-branch&gt;\nReplace  with a descriptive name for your branch.\n\nMake and Test Changes\n\nOpen the Jupyter Notebooks in the repository to make your changes. Changes should be made to notebooks in the nbs/ folder only. The package .py files are automatically generated from the notebooks.\nRun the following command to rebuild the Python package, documentation and run the tests:\nnbdev_prepare\n\nWhen ready you can create a pull request.",
    "crumbs": [
      "Install"
    ]
  },
  {
    "objectID": "API/utils.html",
    "href": "API/utils.html",
    "title": "utils",
    "section": "",
    "text": "source\n\ndownload_file\n\n download_file (url, save_path)\n\nChecks if a file with the same name is already in the save_path. If not download it.\n\nsource\n\n\nis_gzipped_file\n\n is_gzipped_file (file_path)\n\n\nsource\n\n\ndefault_open_gz\n\n default_open_gz (gff_path)\n\nIf file is gzipped then opens it with gzip.open, otherwise opens it with open\n\n# Example usage\nfile_url = 'https://ftp.ncbi.nlm.nih.gov/refseq/H_sapiens/annotation/GRCh38_latest/refseq_identifiers/GRCh38_latest_genomic.gff.gz'\nhuman_genome_gff = 'GRCh38_latest_genomic.gff.gz'\n\ndownload_file(file_url, human_genome_gff)\nis_gzipped_file(human_genome_gff)\n\nFile already exists: GRCh38_latest_genomic.gff.gz\n\n\nTrue\n\n\n\nsource\n\n\nextract_attribute\n\n extract_attribute (input_str:str, attr_name:str)\n\nExtracts the attribute called attr_name from the GFF attributes string\n\n\n\n\nType\nDetails\n\n\n\n\ninput_str\nstr\nattribute string to parse\n\n\nattr_name\nstr\nname of the attribute to extract\n\n\nReturns\nstr\n\n\n\n\n\ninput_str = 'ID=cds-ATV02827.1;Parent=gene-SaO11_00001;Dbxref=NCBI_GP:ATV02827.1;Name=ATV02827.1;gbkey=CDS;gene=dnaA;locus_tag=SaO11_00001;product=Chromosomal replication initiator protein DnaA;protein_id=ATV02827.1;transl_table=11'\nextract_attribute(input_str,\"gene\")\n\n'dnaA'\n\n\n\nsource\n\n\nextract_all_attributes\n\n extract_all_attributes (input_str:str)\n\nExtracts all attributes from the GFF attributes column\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\ninput_str\nstr\n\n\n\nReturns\nOrderedDict\nTODO: why is this not limited by the attributes subset provided to GenomeBrowser?\n\n\n\n\nsource\n\n\nextract_attributes\n\n extract_attributes (input_str:str, attributes:Optional[List[str]]=None)\n\nExtracts attributes from the GFF attributes column\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ninput_str\nstr\n\nthe attribute string of a GFF fome\n\n\nattributes\nOptional\nNone\nan optional list of attribute names to extract. If None all attributes are extracted.\n\n\nReturns\nOrderedDict\n\n\n\n\n\n\nsource\n\n\nget_attributes\n\n get_attributes (df:pandas.core.frame.DataFrame,\n                 attributes:Optional[Dict[str,List]]=None)\n\nIterates over each row of the df and extracts the attributes specified in the attributes dictionary for each feature type\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndf\nDataFrame\n\na features DataFrame with at least a “type” column and an “attributes_str” column\n\n\nattributes\nOptional\nNone\na dictionary with feature types as keys and a list of attributes to extract as values\n\n\nReturns\nList\n\n\n\n\n\n\nsource\n\n\nattributes_to_columns\n\n attributes_to_columns (features:pandas.core.frame.DataFrame)\n\n\nsource\n\n\nset_positions\n\n set_positions (annotation:pandas.core.frame.DataFrame)\n\nSets left and right as the position of the feature on the sequence, left is always lower than right. start and end represent the begining and end of the feature where start can be greater than end depending on the feature strand.\n\n\n\n\n\n\n\n\n\nType\nDetails\n\n\n\n\nannotation\nDataFrame\nan annotation DataFrame extracted from a gff file\n\n\nReturns\nDataFrame\n\n\n\n\n\nsource\n\n\nparse_gff\n\n parse_gff (gff_path:str, seq_id:Optional[str]=None, first:bool=True,\n            bounds:Optional[tuple]=None,\n            feature_types:Optional[list]=None,\n            attributes:Optional[Dict[str,List]]=None)\n\nParses a GFF3 file and returns a list of Pandas DataFrames with the data for a specific contig. If seq_id is None then only the first contig is parsed. If feature_types is None then all feature types are extracted.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngff_path\nstr\n\npath to the gff file\n\n\nseq_id\nOptional\nNone\nsequence id (first column of the gff), if not None, then return only the annotations for the seq_id with this name\n\n\nfirst\nbool\nTrue\nif True then return only the annotations for the first sequence (or the first with seq_id)\n\n\nbounds\nOptional\nNone\n(left limit, right limit)\n\n\nfeature_types\nOptional\nNone\nlist of feature types to extract\n\n\nattributes\nOptional\nNone\na dictionary with feature types as keys and a list of attributes to extract as values\n\n\nReturns\nList\n\n\n\n\n\n\nfrom genomenotebook.data import get_example_data_dir\nimport os\n\n\ndata_path = get_example_data_dir()\ngff_path = os.path.join(data_path, \"jmh43.gff\")\ndf=parse_gff(gff_path, \n             bounds=(10000,50000))[0]\ndf.head()\n\n\n\n\n\n\n\n\nseq_id\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\nleft\nright\nmiddle\n\n\n\n\n0\nNZ_JAGURL010000100.1\nRefSeq\nregion\n1\n16949\n.\n+\n.\n{'ID': 'NZ_JAGURL010000100.1:1..16949', 'Dbxre...\n1\n16949\n8475.0\n\n\n1\nNZ_JAGURL010000100.1\nRefSeq\ngene\n10059\n8311\n.\n-\n.\n{'ID': 'gene-KFX61_RS20985', 'Name': 'KFX61_RS...\n8311\n10059\n9185.0\n\n\n2\nNZ_JAGURL010000100.1\nProtein Homology\nCDS\n10059\n8311\n.\n-\n0\n{'ID': 'cds-WP_225638104.1', 'Parent': 'gene-K...\n8311\n10059\n9185.0\n\n\n3\nNZ_JAGURL010000100.1\nRefSeq\ngene\n10541\n10092\n.\n-\n.\n{'ID': 'gene-KFX61_RS20990', 'Name': 'KFX61_RS...\n10092\n10541\n10316.5\n\n\n4\nNZ_JAGURL010000100.1\nProtein Homology\nCDS\n10541\n10092\n.\n-\n0\n{'ID': 'cds-WP_016268480.1', 'Parent': 'gene-K...\n10092\n10541\n10316.5\n\n\n\n\n\n\n\n\ndf=parse_gff(gff_path, \n             seq_id=\"NZ_JAGURL010000013.1\",\n             bounds=(10000,50000))[0]\ndf.head()\n\n\n\n\n\n\n\n\nseq_id\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\nleft\nright\nmiddle\n\n\n\n\n0\nNZ_JAGURL010000013.1\nRefSeq\nregion\n1\n98838\n.\n+\n.\n{'ID': 'NZ_JAGURL010000013.1:1..98838', 'Dbxre...\n1\n98838\n49419.5\n\n\n1\nNZ_JAGURL010000013.1\nRefSeq\ngene\n10195\n11175\n.\n+\n.\n{'ID': 'gene-KFX61_RS05880', 'Name': 'KFX61_RS...\n10195\n11175\n10685.0\n\n\n2\nNZ_JAGURL010000013.1\nProtein Homology\nCDS\n10195\n11175\n.\n+\n0\n{'ID': 'cds-WP_048697200.1', 'Parent': 'gene-K...\n10195\n11175\n10685.0\n\n\n3\nNZ_JAGURL010000013.1\nRefSeq\ngene\n11234\n11824\n.\n+\n.\n{'ID': 'gene-KFX61_RS05885', 'Name': 'KFX61_RS...\n11234\n11824\n11529.0\n\n\n4\nNZ_JAGURL010000013.1\nProtein Homology\nCDS\n11234\n11824\n.\n+\n0\n{'ID': 'cds-WP_048697198.1', 'Parent': 'gene-K...\n11234\n11824\n11529.0\n\n\n\n\n\n\n\n\ngenome_path = os.path.join(data_path, \"MG1655_U00096.fasta\")\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\nparse_gff(gff_path)[0].head()\n\n\n\n\n\n\n\n\nseq_id\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\nleft\nright\nmiddle\n\n\n\n\n0\nU00096.3\nGenbank\nregion\n1\n4641652\n.\n+\n.\n{'ID': 'U00096.3:1..4641652', 'Dbxref': 'taxon...\n1\n4641652\n2320826.5\n\n\n1\nU00096.3\nGenbank\ngene\n190\n255\n.\n+\n.\n{'ID': 'gene-b0001', 'Dbxref': 'ASAP:ABE-00000...\n190\n255\n222.5\n\n\n2\nU00096.3\nGenbank\nCDS\n190\n255\n.\n+\n0\n{'ID': 'cds-AAC73112.1', 'Parent': 'gene-b0001...\n190\n255\n222.5\n\n\n3\nU00096.3\nGenbank\ngene\n337\n2799\n.\n+\n.\n{'ID': 'gene-b0002', 'Dbxref': 'ASAP:ABE-00000...\n337\n2799\n1568.0\n\n\n4\nU00096.3\nGenbank\nCDS\n337\n2799\n.\n+\n0\n{'ID': 'cds-AAC73113.1', 'Parent': 'gene-b0002...\n337\n2799\n1568.0\n\n\n\n\n\n\n\n\nsource\n\n\navailable_feature_types\n\n available_feature_types (gff_path)\n\n\ndata_path = get_example_data_dir()\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\navailable_feature_types(gff_path)\n\n{'CDS',\n 'exon',\n 'gene',\n 'mobile_genetic_element',\n 'ncRNA',\n 'origin_of_replication',\n 'pseudogene',\n 'rRNA',\n 'recombination_feature',\n 'region',\n 'repeat_region',\n 'sequence_feature',\n 'tRNA'}\n\n\n\nsource\n\n\navailable_attributes\n\n available_attributes (gff_path)\n\n\navailable_attributes(gff_path)\n\nIndex(['seq_id', 'source', 'type', 'start', 'end', 'score', 'strand', 'phase',\n       'attributes', 'left', 'right', 'middle'],\n      dtype='object')\n\n\n\nsource\n\n\nparse_fasta\n\n parse_fasta (genome_path, seq_id)\n\nRetrieves the Biopython SeqRecord object that matches the seq_id in a fasta file\n\nsource\n\n\nregions_overlap\n\n regions_overlap (region1, region2, min_overlap_fraction=0.0)\n\nregions are tuples of start and stop coordinates returns true if a fraction of region2 &gt;= min_overlap_fraction overlaps with region1 coordinates within regions must be sorted low to high\n\nsource\n\n\nadd_z_order\n\n add_z_order (features, prescedence=['source', 'CDS', 'repeat_region',\n              'ncRNA', 'rRNA', 'tRNA', 'exon'])\n\nfeatures is a dataframe of features prescedence is a list of feature types in order of prescedence, e.g. [“CDS”, “repeat_region”, “ncRNA”, “rRNA”, “tRNA”] will put “CDS” features closer to the bottom of the plot than “repeat_region” features. returns features with a z_order column added\n\nsource\n\n\nget_cds_name\n\n get_cds_name (feature)\n\n\n\n\n\nDetails\n\n\n\n\nfeature\n(contig_id, feature):\n\n\n\n\nsource\n\n\nget_cds_unique_name\n\n get_cds_unique_name (feature)\n\nIf the feature already has a cds_id, then keep it, otherwise generate one based on the position on the contig.\n\nsource\n\n\nseqRecord_to_df\n\n seqRecord_to_df (rec:&lt;module'Bio.SeqRecord'from'/opt/hostedtoolcache/Pyth\n                  on/3.10.17/x64/lib/python3.10/site-\n                  packages/Bio/SeqRecord.py'&gt;,\n                  feature_types:Optional[List[str]]=None,\n                  attributes:Optional[Dict[str,List]]=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrec\nBio.SeqRecord\n\n\n\n\nfeature_types\nOptional\nNone\nif None then get all features, otherwise only those with type in FeatureTypes.\n\n\nattributes\nOptional\nNone\n\n\n\nReturns\nDataFrame\n\nif None, then get all attributes of all feature types. If dict, then only get attributes of feature types keys. If value is None, get all\n\n\n\n\ngb_path=os.path.join(data_path, \"colored_genbank.gb\")\nrecs=SeqIO.parse(gb_path, \"genbank\")\nrec=next(recs)\ndf=seqRecord_to_df(rec, feature_types=[\"CDS\"])\ndf.loc[1][\"attributes\"]\n\nOrderedDict([('gene_id', 'pDONR201_2'),\n             ('gene_type', 'bacteria'),\n             ('complete', 'true'),\n             ('gc', '50'),\n             ('length', '306'),\n             ('source', 'GeneMark.hmm2'),\n             ('score', '20.71'),\n             ('phase', '0'),\n             ('name', 'pDONR201_2'),\n             ('cds_id', '1264_-1_959'),\n             ('domainator_pdonr_hmms', 'CcdB (CcdB protein, 1.1e-32, 103.1)'),\n             ('Color', '#FF0000')])\n\n\n\ndf=seqRecord_to_df(rec, feature_types=[\"CDS\"], attributes={\"CDS\":[\"gene_type\"]})\ndf.head()\n\n\n\n\n\n\n\n\nseq_id\nsource\ntype\nstart\nend\nscore\nstrand\nphase\nattributes\n\n\n\n\n0\npDONR201_1\nGenbank\nCDS\n2\n106\n.\n+\n.\n{'gene_type': 'bacteria'}\n\n\n1\npDONR201_1\nGenbank\nCDS\n959\n1264\n.\n-\n.\n{'gene_type': 'bacteria'}\n\n\n2\npDONR201_1\nGenbank\nCDS\n1266\n1391\n.\n-\n.\n{'gene_type': 'bacteria'}\n\n\n3\npDONR201_1\nGenbank\nCDS\n1606\n2265\n.\n-\n.\n{'gene_type': 'bacteria'}\n\n\n4\npDONR201_1\nGenbank\nCDS\n2916\n3677\n.\n+\n.\n{'gene_type': 'bacteria'}\n\n\n\n\n\n\n\n\nsource\n\n\nparse_recs\n\n parse_recs (recs, seq_id:Optional[str]=None, first=True,\n             bounds:Optional[tuple]=None,\n             feature_types:Optional[list]=None,\n             attributes:Optional[Dict[str,List]]=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nrecs\n\n\niterator over Bio.SeqRecord.SeqRecord\n\n\nseq_id\nOptional\nNone\nsequence id (first column of the gff), if not None, then return only the annotations for the seq_id with this name\n\n\nfirst\nbool\nTrue\nif True then return only the annotations for the first sequence (or the first with seq_id)\n\n\nbounds\nOptional\nNone\n(left limit, right limit)\n\n\nfeature_types\nOptional\nNone\nlist of feature types to extract\n\n\nattributes\nOptional\nNone\na dictionary with feature types as keys and a list of attributes to extract as values\n\n\nReturns\nTuple\n\n\n\n\n\n\nsource\n\n\nparse_genbank\n\n parse_genbank (gb_path, seq_id:Optional[str]=None, first=True,\n                bounds:Optional[tuple]=None,\n                feature_types:Optional[list]=None,\n                attributes:Optional[Dict[str,List]]=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngb_path\n\n\npath to the genbank file\n\n\nseq_id\nOptional\nNone\nsequence id (first column of the gff), if not None, then return only the annotations for the seq_id with this name\n\n\nfirst\nbool\nTrue\nif True then return only the annotations for the first sequence (or the first with seq_id)\n\n\nbounds\nOptional\nNone\n(left limit, right limit)\n\n\nfeature_types\nOptional\nNone\nlist of feature types to extract\n\n\nattributes\nOptional\nNone\na dictionary with feature types as keys and a list of attributes to extract as values\n\n\nReturns\nTuple\n\n\n\n\n\n\ngb_path=os.path.join(data_path, \"colored_genbank.gb\")\nrecs=SeqIO.parse(gb_path, \"genbank\")\nrec=next(recs)\ntestid=rec.id\n\nseqs, dfs=parse_genbank(gb_path, seq_id = testid,\n                 feature_types=[\"CDS\", \"Domainator\"]\n                )\n\n# dfs[0].head()\nassert len(dfs) == len(seqs)\nassert len(dfs) == 1\nassert dfs[0].loc[0, \"seq_id\"] == \"pDONR201_1\"\n\n\ngb_path=os.path.join(data_path, \"colored_genbank.gb\")\nseqs, dfs=parse_genbank(gb_path,\n                 seq_id=None,\n                 first=False,\n                 feature_types=[\"CDS\", \"Domainator\"]\n                )\n\nassert len(dfs) == len(seqs)\nassert len(dfs) == 4\nassert dfs[0].loc[0, \"seq_id\"] == \"pDONR201_1\"\nassert dfs[1].loc[0, \"seq_id\"] == \"pDONR201_2\"\nassert dfs[2].loc[0, \"seq_id\"] == \"pDONR201_3\"\nassert dfs[3].loc[0, \"seq_id\"] == \"pDONR201_4\"\n\n\nsource\n\n\ninspect_feature_types\n\n inspect_feature_types (file_path:str, frmt:str)\n\nOutputs a table that recapitulates the feature types and attributes available in the file.\n\n\n\n\nType\nDetails\n\n\n\n\nfile_path\nstr\n\n\n\nfrmt\nstr\ngff or genbank\n\n\n\n\ninspect_feature_types(gff_path, \"gff\")\n\n\n\n\nfeature_type\nattributes\n\n\n\n\nexon\nID\n\n\n\nParent\n\n\n\nanticodon\n\n\n\ngbkey\n\n\n\ninference\n\n\n\nlocus_tag\n\n\n\nproduct\n\n\nCDS\nID\n\n\n\nParent\n\n\n\nDbxref\n\n\n\nName\n\n\n\ngbkey\n\n\n\ninference\n\n\n\nlocus_tag\n\n\n\nproduct\n\n\n\nprotein_id\n\n\n\ntransl_table\n\n\ntRNA\nID\n\n\n\nParent\n\n\n\nanticodon\n\n\n\ngbkey\n\n\n\ninference\n\n\n\nlocus_tag\n\n\n\nproduct\n\n\nregion\nID\n\n\n\nDbxref\n\n\n\ncountry\n\n\n\ngbkey\n\n\n\ngenome\n\n\n\nmol_type\n\n\n\nnat-host\n\n\n\nstrain\n\n\ngene\nID\n\n\n\nName\n\n\n\ngbkey\n\n\n\ngene_biotype\n\n\n\nlocus_tag\n\n\n\nold_locus_tag",
    "crumbs": [
      "API",
      "utils"
    ]
  },
  {
    "objectID": "API/browser.html",
    "href": "API/browser.html",
    "title": "browser",
    "section": "",
    "text": "source\n\nGenomeBrowser\n\n GenomeBrowser (gff_path:str=None, fasta_path:str=None, gb_path:str=None,\n                seq_id:str=None, init_pos:int=None, init_win:int=10000,\n                bounds:tuple=None, max_interval:int=100000,\n                show_seq:bool=True, search:bool=True,\n                attributes:Union[list,Dict[str,Optional[list]]]=None,\n                feature_name:Union[str,Dict[str,str],NoneType]=None,\n                feature_types:list=None, glyphs:dict=None, height:int=150,\n                width:int=600, label_angle:int=45,\n                label_font_size:str='10pt', label_justify:str='center',\n                label_vertical_offset:float=0.03,\n                label_horizontal_offset:float=-5, show_labels:bool=True,\n                feature_height:float=0.15,\n                features:pandas.core.frame.DataFrame=None,\n                seq:Bio.Seq.Seq=None, color_attribute:str=None,\n                z_stack:bool=False, **kwargs)\n\nInitialize a GenomeBrowser object.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngff_path\nstr\nNone\npath to the gff3 file of the annotations (also accepts gzip files)\n\n\nfasta_path\nstr\nNone\npath to the fasta file of the genome sequence\n\n\ngb_path\nstr\nNone\npath to a genbank file\n\n\nseq_id\nstr\nNone\nid of the sequence to load, for genomes with multiple contigs, defaults to the first sequence in the genbank or gff file.\n\n\ninit_pos\nint\nNone\ninitial position to display\n\n\ninit_win\nint\n10000\ninitial window size (max=20000)\n\n\nbounds\ntuple\nNone\nbounds can be specified. This helps preserve memory by not loading the whole genome if not needed.\n\n\nmax_interval\nint\n100000\nmaximum size of the field of view in bp\n\n\nshow_seq\nbool\nTrue\ncreates a html div that shows the sequence when zooming in\n\n\nsearch\nbool\nTrue\nenables a search bar\n\n\nattributes\nUnion\nNone\nlist of attribute names from the GFF attributes column to be extracted. If dict then keys are feature types and values are lists of attributes. If None, then all attributes will be used.\n\n\nfeature_name\nUnion\nNone\nattribute to be displayed as the feature name. If str then use the same field for every feature type. If dict then keys are feature types and values are feature name attribute.\n\n\nfeature_types\nlist\nNone\nlist of feature types to display\n\n\nglyphs\ndict\nNone\ndictionary defining the type and color of glyphs to display for each feature type\n\n\nheight\nint\n150\nheight of the annotation track\n\n\nwidth\nint\n600\nwidth of the inner frame of the browser\n\n\nlabel_angle\nint\n45\nangle of the feature names displayed on top of the features\n\n\nlabel_font_size\nstr\n10pt\nfont size fo the feature names\n\n\nlabel_justify\nstr\ncenter\ncenter, left\n\n\nlabel_vertical_offset\nfloat\n0.03\nhow far above a feature to draw the label\n\n\nlabel_horizontal_offset\nfloat\n-5\nhow far to shift the feature label on the x-axis\n\n\nshow_labels\nbool\nTrue\nif False, then don’t show feature labels\n\n\nfeature_height\nfloat\n0.15\nfraction of the annotation track height occupied by the features\n\n\nfeatures\nDataFrame\nNone\nDataFrame with columns: [“seq_id”, “source”, “type”, “start”, “end”, “score”, “strand”, “phase”, “attributes”], where “attributes” is a dict of attributes.\n\n\nseq\nSeq\nNone\nkeeps the Biopython sequence object\n\n\ncolor_attribute\nstr\nNone\nfeature attribute to be used as patch color\n\n\nz_stack\nbool\nFalse\nif true features that overlap will be stacked on top of each other\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\nAdditional keyword arguments are passed as is to bokeh.plotting.figure\nUpon initialization a GenomBrowser object parses the data and creates a the GenomeBrowser.patches pandas DataFrame that contains the data to be plotted.\n\nfrom genomenotebook.data import get_example_data_dir\nimport os\n\n\ndata_path = get_example_data_dir()\nfasta_path = os.path.join(data_path, \"MG1655_U00096.fasta\")\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\n\ng=GenomeBrowser(gff_path=gff_path, fasta_path=fasta_path, bounds=(0,50000))\nprint(g.seq_id, g.seq[:10])\ng.patches.head()\n\nU00096.3 AGCTTTTCAT\n\n\n\n\n\n\n\n\n\nnames\nxs\nys\nxbox_min\ncolor\nalpha\npos\nattributes\ntype\nlabel_y\nlabel_x\n\n\n\n\n0\nthrL\n(190, 190, 190, 255, 190)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n190\npurple\n0.8\n222.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.23\n222.5\n\n\n1\nthrA\n(337, 337, 2699, 2799, 2699)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n337\npurple\n0.8\n1568.0\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.23\n1568.0\n\n\n2\nthrB\n(2801, 2801, 3633, 3733, 3633)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n2801\npurple\n0.8\n3267.0\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.23\n3267.0\n\n\n3\nthrC\n(3734, 3734, 4920, 5020, 4920)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n3734\npurple\n0.8\n4377.0\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.23\n4377.0\n\n\n4\nyaaX\n(5234, 5234, 5430, 5530, 5430)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n5234\npurple\n0.8\n5382.0\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.23\n5382.0\n\n\n\n\n\n\n\n\nsource\n\n\nGenomeBrowser.show\n\n GenomeBrowser.show ()\n\nShows the plot in an interactive Jupyter notebook\n\n#GFF + FASTA input\ng=GenomeBrowser(fasta_path=fasta_path, gff_path=gff_path, bounds=(0,50000),width=600)\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\n#GenBank input\ngb_path=os.path.join(data_path, \"colored_genbank.gb\")\ng=GenomeBrowser(gb_path=gb_path)\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\n#Providing GFF file as the only input\ng=GenomeBrowser(gff_path)\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\nsource\n\n\nGenomeBrowser.add_track\n\n GenomeBrowser.add_track (height:int=200, tools:str='xwheel_zoom,\n                          ywheel_zoom, pan, box_zoom, save, reset',\n                          **kwargs)\n\nAdds a track to the GenomeBrowser. Ensures that the x_range are shared and figure widths are identical.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nheight\nint\n200\nsize of the track\n\n\ntools\nstr\nxwheel_zoom, ywheel_zoom, pan, box_zoom, save, reset\ncomma separated list of Bokeh tools that can be used to navigate the plot\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\nReturns\nTrack\n\n\n\n\n\n\nfasta_path = os.path.join(data_path, \"MG1655_U00096.fasta\")\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\n\ndata=pd.DataFrame(dict(x=np.arange(0,50000,100),\n                       y=np.sin(np.arange(0,50000,100))))\n\ng=GenomeBrowser(fasta_path=fasta_path, gff_path=gff_path, bounds=(0,5000), search=False, show_seq=False)\n\ntrack = g.add_track(height=100)\ntrack.scatter(data=data,pos=\"x\",y=\"y\")\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\nsource\n\n\nGenomeBrowser.highlight\n\n GenomeBrowser.highlight (data:pandas.core.frame.DataFrame=None,\n                          left_col:str='left', right_col:str='right',\n                          color_col:str='color', alpha_col:str='alpha',\n                          left=None, right=None, color='green',\n                          alpha:str=0.2, hover_data:List=None, **kwargs)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ndata\nDataFrame\nNone\npandas DataFrame containing the data\n\n\nleft_col\nstr\nleft\nname of the column containing the start positions of the regions\n\n\nright_col\nstr\nright\nname of the column containing the end positions of the regions\n\n\ncolor_col\nstr\ncolor\nname of the column containing color of the regions\n\n\nalpha_col\nstr\nalpha\nname of the column containing alpha (transparency) of the regions\n\n\nleft\nNoneType\nNone\n\n\n\nright\nNoneType\nNone\n\n\n\ncolor\nstr\ngreen\n\n\n\nalpha\nstr\n0.2\ntransparency\n\n\nhover_data\nList\nNone\nlist of additional column names to be shown when hovering over the data\n\n\nkwargs\nVAR_KEYWORD\n\n\n\n\n\n\nimport pandas as pd\n\n\nhighlight_regions=pd.DataFrame({\"start\": [5000, 8000], \"stop\": [6000, 8500], \"color\": [\"red\",\"green\"], \"y\":[23, 45]})\n\ng=GenomeBrowser(gff_path=gff_path, fasta_path=fasta_path, bounds=(0,10000))\ng.highlight(data=highlight_regions, left_col=\"start\", right_col=\"stop\", hover_data=[\"y\"])\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\ndata=pd.DataFrame(dict(x=np.arange(0,50000,100),\n                       y=np.sin(np.arange(0,50000,100))))\n\ng=GenomeBrowser(fasta_path=fasta_path, gff_path=gff_path, bounds=(0,5000), search=False, show_seq=False)\ntrack = g.add_track(height=100)\ntrack.scatter(data=data,pos=\"x\",y=\"y\")\n\nhighlight_regions=pd.DataFrame({\"start\": [2000, 4000], \"stop\": [3000, 4500], \"color\": [\"red\",\"green\"], \"y\":[23, 45]})\ng.highlight(data=highlight_regions, left_col=\"start\", right_col=\"stop\", hover_data=[\"y\"], highlight_tracks=True)\n\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\nsource\n\n\nGenomeBrowser.add_tooltip_data\n\n GenomeBrowser.add_tooltip_data (name:str, values:str,\n                                 feature_type:str=None)\n\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nname\nstr\n\nname of the data to be added\n\n\nvalues\nstr\n\nvalues\n\n\nfeature_type\nstr\nNone\nspecify the feature type if the data applies only a to specific feature_type\n\n\n\n\ng=GenomeBrowser(gff_path=gff_path, attributes=[\"gene\", \"locus_tag\"],bounds=(0,10000))\ndata=np.random.randint(0,10,len(g.patches))\ng.add_tooltip_data(\"data\",data)\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\nsource\n\n\nGenomeBrowser.save\n\n GenomeBrowser.save (fname:str, title:str='Genome Plot')\n\nSaves the plot in svg or png. This function saves the initial plot that is generated and not the current view of the browser. To save in svg format you must initialise your GenomeBrowser using output_backend=\"svg\"\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nfname\nstr\n\nfile name (must end in .svg or . png).If using svg, GenomeBrowser needs to be initialized with output_backend=\"svg\"\n\n\ntitle\nstr\nGenome Plot\nplot title\n\n\n\n\nSaving to svg\n\ng=GenomeBrowser(gff_path=gff_path, \n                bounds=(0,5000),\n                search=False)\ntrack = g.add_track(height=100)\ntrack.scatter(data=pd.DataFrame(dict(x=np.arange(0,5000,100),y=np.sin(np.arange(0,5000,100)))), y=\"y\", pos=\"x\")\ng.save(\"test.svg\")\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\n\nSaving to png\n\ng=GenomeBrowser(fasta_path=fasta_path, \n                gff_path=gff_path,\n                bounds=(0,5000),\n                search=False,\n                height=200,\n                width=2000,\n                label_font_size=\"20pt\")\ng.save(\"test.png\")\n\n\nsource\n\n\n\nGenomeStack\n\n GenomeStack (browsers=None)\n\nInitialize self. See help(type(self)) for accurate signature.\n\ndata_path = get_example_data_dir()\ngb_path = os.path.join(data_path, \"colored_genbank.gb\")\ng = GenomeStack.from_genbank(gb_path,\n                                width=700, \n                                show_seq=True, \n                                search=False, \n                                feature_types=[\"CDS\", \"Domainator\"], \n                                color_attribute=\"Color\", \n                                label_angle=0, \n                                show_labels=True, \n                                feature_height=0.15, \n                                label_vertical_offset=-0.15, \n                                label_justify=\"left\", \n                                label_horizontal_offset = 5, \n                                glyphs=get_default_glyphs(box_colors=(\"Cyan\",)), \n                                feature_name={\"CDS\":\"gene_id\",\"Domainator\":\"name\"},\n                                z_stack=True) \ng.show()",
    "crumbs": [
      "API",
      "browser"
    ]
  },
  {
    "objectID": "options.html",
    "href": "options.html",
    "title": "Options",
    "section": "",
    "text": "import genomenotebook as gn\nimport os\n\n\n\n\n\n\n\n\ndata_path = gn.get_example_data_dir()\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\n\ng=gn.GenomeBrowser(gff_path,\n                   search=False,\n                   z_stack=True,\n                   bounds=(220000,250000) #specifying bounds avoids loading the whole genome in memory\n                   )\ng.show()",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "options.html#stack-overlapping-features-vertically-using-z_stacktrue",
    "href": "options.html#stack-overlapping-features-vertically-using-z_stacktrue",
    "title": "Options",
    "section": "",
    "text": "import genomenotebook as gn\nimport os\n\n\n\n\n\n\n\n\ndata_path = gn.get_example_data_dir()\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\n\ng=gn.GenomeBrowser(gff_path,\n                   search=False,\n                   z_stack=True,\n                   bounds=(220000,250000) #specifying bounds avoids loading the whole genome in memory\n                   )\ng.show()",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "options.html#selecting-feature-types-and-attributes",
    "href": "options.html#selecting-feature-types-and-attributes",
    "title": "Options",
    "section": "Selecting feature types and attributes",
    "text": "Selecting feature types and attributes\nYou can select which feature type to display. The default feature types are [\"CDS\", \"repeat_region\", \"ncRNA\", \"rRNA\", \"tRNA\"].\nYou can inspect the gff file to see what feature types and attributes are available. The parse_gff or parse_genbank functions can conveniently be used for this purpose. You can also use the inspect_feature_types function to output a table of feature types and attributes.\n\n#Choosing the feature types and attributes to display\ng=gn.GenomeBrowser(gff_path, \n                   feature_types = [\"tRNA\",\"rRNA\"],\n                   attributes = [\"gene\",\"locus_tag\",\"product\",\"gbkey\"], #will be displayed when hovering \n                   bounds=(220000,230000), #specifying bounds avoids loading the whole genome in memory\n                   init_pos=226000)\ng.show()",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "options.html#changing-colors",
    "href": "options.html#changing-colors",
    "title": "Options",
    "section": "Changing colors",
    "text": "Changing colors\n\nModifying features by type\nThe glyph shown for each feature type is defined through a Glyph object. A custom glyphs dictionnary can be passed to GenomeBrowser to customize the glyphs shown for different features.\n\nglyphs=gn.get_default_glyphs()\nglyphs['CDS']\n\nGlyph object with attributes:\n    glyph_type: arrow\n    colors: ('purple', 'orange')\n    height: 1\n    alpha: 0.8\n    show_name: True\n    name_attr: gene\n\n\n\nglyphs['repeat_region']\n\nGlyph object with attributes:\n    glyph_type: box\n    colors: ('grey',)\n    height: 0.8\n    alpha: 1\n    show_name: False\n    name_attr: gene\n\n\nModifying the default glyphs\n\nglyphs[\"CDS\"].colors= ('blue','green') #two colors can be specified, one for each orientation.\n\ng=gn.GenomeBrowser(gff_path, glyphs=glyphs, init_pos=224000, bounds=(220000,230000), search=False)\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\nDefining a new Glyph from scractch\n\nglyphs[\"rRNA\"]=gn.Glyph(glyph_type=\"box\", \n                        colors=\"red\", \n                        height=0.5,\n                        show_name=True)         \ng=gn.GenomeBrowser(gff_path, \n                   glyphs=glyphs,\n                   feature_name={'rRNA':\"locus_tag\"},\n                   init_pos=224000, \n                   bounds=(220000,230000), \n                   search=False)\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\ng.glyphs[\"rRNA\"]\n\nGlyph object with attributes:\n    glyph_type: box\n    colors: ('red',)\n    height: 0.5\n    alpha: 0.8\n    show_name: True\n    name_attr: locus_tag\n\n\n\n\nModifying specific features\nYou can also access a DataFrame with the characteristics of each feature plotted on the genome browser. These can be modified as you wish to customize your plot.\n\ng.patches.head()\n\n\n\n\n\n\n\n\nnames\nxs\nys\nxbox_min\ncolor\nalpha\npos\nattributes\ntype\nlabel_y\nlabel_x\n\n\n\n\n0\nmetQ\n(220928, 220928, 220213, 220113, 220213)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n220213\ngreen\n0.8\n220520.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.2300\n220520.5\n\n\n1\nmetI\n(221621, 221621, 221068, 220968, 221068)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n221068\ngreen\n0.8\n221294.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.2300\n221294.5\n\n\n2\nmetN\n(222645, 222645, 221714, 221614, 221714)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n221714\ngreen\n0.8\n222129.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.2300\n222129.5\n\n\n3\ngmhB\n(222833, 222833, 223308, 223408, 223308)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n222833\nblue\n0.8\n223120.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.2300\n223120.5\n\n\n4\nb0201\n(223771, 223771, 225312, 225312)\n(0.0875, 0.1625, 0.1625, 0.0875)\n223771\nred\n0.8\n224541.5\n&lt;span style=\"color:FireBrick\"&gt;rRNA&lt;/span&gt;&lt;br&gt;&lt;...\nrRNA\n0.2675\n224541.5\n\n\n\n\n\n\n\n\ng=gn.GenomeBrowser(gff_path, init_pos=224000, bounds=(220000,230000), search=False)\ng.patches.loc[g.patches.names==\"metN\",\"color\"]=\"green\"\ng.show()",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "options.html#customizing-labels",
    "href": "options.html#customizing-labels",
    "title": "Options",
    "section": "Customizing labels",
    "text": "Customizing labels\n\nChanging the attribute used as the feature name\nYou can chose which attribute of the GFF file should be displayed on top of the gene. The feature_name needs to belong to the list of attributes. The default list of attributes is [“locus_tag”,“gene”,“product”].\n\ng=gn.GenomeBrowser(gff_path, \n                   attributes=[\"protein_id\",'gene','product'], \n                   feature_name=\"protein_id\",\n                   bounds=(20000,30000),\n                   search=False)\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\nYou can also provide a dictionary to use different names for different feature types\n\ng=gn.GenomeBrowser(gff_path, \n                   attributes=[\"protein_id\",'gene','product','ID'],\n                   feature_types=[\"rRNA\",\"CDS\"],\n                   feature_name={\"CDS\":\"gene\",'rRNA':'ID'},\n                   bounds=(220000,230000),\n                   search=False)\n\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\n\nChanging the name of specific features\nYou can also modify the names of specific features directly in the patches DataFrame\n\ng.patches.head()\n\n\n\n\n\n\n\n\nnames\nxs\nys\nxbox_min\ncolor\nalpha\npos\nattributes\ntype\nlabel_y\nlabel_x\n\n\n\n\n0\nmetQ\n(220928, 220928, 220213, 220113, 220213)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n220213\norange\n0.8\n220520.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.23\n220520.5\n\n\n1\nmetI\n(221621, 221621, 221068, 220968, 221068)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n221068\norange\n0.8\n221294.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.23\n221294.5\n\n\n2\nmetN\n(222645, 222645, 221714, 221614, 221714)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n221714\norange\n0.8\n222129.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.23\n222129.5\n\n\n3\ngmhB\n(222833, 222833, 223308, 223408, 223308)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n222833\npurple\n0.8\n223120.5\n&lt;span style=\"color:FireBrick\"&gt;CDS&lt;/span&gt;&lt;br&gt;&lt;s...\nCDS\n0.23\n223120.5\n\n\n4\nrna-b0201\n(223771, 223771, 225212, 225312, 225212)\n(0.05, 0.2, 0.2, 0.125, 0.05)\n223771\npurple\n0.8\n224541.5\n&lt;span style=\"color:FireBrick\"&gt;rRNA&lt;/span&gt;&lt;br&gt;&lt;...\nrRNA\n0.23\n224541.5\n\n\n\n\n\n\n\n\ng.patches.loc[g.patches.names==\"metN\",\"color\"]=\"green\"\ng.patches.loc[g.patches.names==\"metN\",\"names\"]=\"custom\"\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\n\nChanging label angle and size\n\ng=gn.GenomeBrowser(gff_path,  \n                   label_angle=0,\n                   label_font_size=\"10pt\",\n                   height=200,\n                   feature_height=0.2, #fraction of the annotation track occupied by the features\n                   bounds=(20000,30000),\n                   attributes=[\"gene\",\"locus_tag\"],\n                   search=False,\n                   z_stack=True) #z_stack will cause overlapping features to shift so that they are distinct on the y-axis\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\n\n\nAdding information to be displayed when hovering\nData can be added to the tooltip that appears when hovering. Make sure that the length of the values list equals the number of patches.\n\ng=gn.GenomeBrowser(gff_path=gff_path, bounds=(0,10000), attributes=[\"gene\",\"product\",\"locus_tag\"])\nvalues=np.random.randint(0,10,len(g.patches))\ng.add_tooltip_data(\"data\",values)\ng.show()",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "options.html#toolbar-location",
    "href": "options.html#toolbar-location",
    "title": "Options",
    "section": "Toolbar location",
    "text": "Toolbar location\nThe location of the toolbar can be changed for each track independently. Placing it above or below can help see all the Bokeh tools available. Valid values are: * “above” * “below” * “left” * “right”\nSee the Bokeh documentation for more details.\n\nimport pandas as pd\n\n\ndata_path = gn.get_example_data_dir()\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\n\ndata=pd.DataFrame(dict(x=np.arange(0,50000,100),\n                       y=np.sin(np.arange(0,50000,100))))\n\ng=gn.GenomeBrowser(gff_path=gff_path, \n                bounds=(0,50000),\n                toolbar_location=\"above\",\n                attributes=[\"gene\",\"product\"],\n                search=False)\n\ntrack = g.add_track(height=200, \n                    toolbar_location=\"above\")\n\ntrack.bar(data=data, pos=\"x\", y=\"y\")\ng.show()",
    "crumbs": [
      "Options"
    ]
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "Create a simple genome browser with a search bar. The sequence appears when zooming in.\n\nimport genomenotebook as gn\nimport os\n\n\n\n\n\n\n\n\n\n\n\n#Using the example E. coli genome data from the package\ndata_path = gn.get_example_data_dir()\nfasta_path = os.path.join(data_path, \"MG1655_U00096.fasta\")\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\n\ng=gn.GenomeBrowser(gff_path=gff_path, \n                   fasta_path=fasta_path, \n                   attributes=[\"gene\", \"locus_tag\", \"product\"], \n                   init_pos=50000,\n                   bounds=(0,100000) #applying bounds avoids loading the whole genome in memory if you don't need it\n                   )\ng.show()",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "examples.html#simple-browser",
    "href": "examples.html#simple-browser",
    "title": "Examples",
    "section": "",
    "text": "Create a simple genome browser with a search bar. The sequence appears when zooming in.\n\nimport genomenotebook as gn\nimport os\n\n\n\n\n\n\n\n\n\n\n\n#Using the example E. coli genome data from the package\ndata_path = gn.get_example_data_dir()\nfasta_path = os.path.join(data_path, \"MG1655_U00096.fasta\")\ngff_path = os.path.join(data_path, \"MG1655_U00096.gff3\")\n\ng=gn.GenomeBrowser(gff_path=gff_path, \n                   fasta_path=fasta_path, \n                   attributes=[\"gene\", \"locus_tag\", \"product\"], \n                   init_pos=50000,\n                   bounds=(0,100000) #applying bounds avoids loading the whole genome in memory if you don't need it\n                   )\ng.show()",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "examples.html#adding-a-data-track",
    "href": "examples.html#adding-a-data-track",
    "title": "Examples",
    "section": "Adding a data track",
    "text": "Adding a data track\nGenomeNotebook provides three types of the pre-built tracks:\n\nTrack.line\nTrack.scatter\nTrack.bar\n\nA pandas DataFrame is passed as the source of the data. See the example usage below.\n\nPlotting some ChIP-seq data with Track.line\n\nimport pyBigWig\nimport pandas as pd\nimport numpy as np\n\n\ng=gn.GenomeBrowser(fasta_path=fasta_path, \n                   gff_path=gff_path, \n                   init_pos=82000,\n                   bounds=(60000,100000),\n                   attributes=[\"gene\", \"locus_tag\", \"product\"],  \n                   search=False, \n                   show_seq=False)\n\n#Importing some coverage data from a BigWig file\nbw_file_path=os.path.join(data_path,\"ChIP-ACCCA-1.bw\")\nrefname='NC_000913'\nwith pyBigWig.open(bw_file_path) as bw:\n    cov=bw.values(refname,0,g.seq_len,numpy=True)\n    \ndata=pd.DataFrame({\"pos\": np.arange(0,g.seq_len,10),\n                     \"cov\": cov[::10]})\n\ntrack=g.add_track()\ntrack.line(data,pos=\"pos\",y=\"cov\", \n           line_color=\"blue\", #check out the Bokeh documentation for other keyword arguments you can pass\n           line_width=2)\ng.show()\n\n\n\n\n\n  \n\n\n\n\n\nNote that pyBigWig cannot be installed on Windows. If you are a windows user you can still make this work by running genomenotebook in WSL.",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "examples.html#plotting-some-crispr-screening-data-with-track.scatter-and-track.bar",
    "href": "examples.html#plotting-some-crispr-screening-data-with-track.scatter-and-track.bar",
    "title": "Examples",
    "section": "Plotting some CRISPR screening data with Track.scatter and Track.bar",
    "text": "Plotting some CRISPR screening data with Track.scatter and Track.bar\n\n#Opening the Cui 2018 CRISPRi screen data\ncui2018data=\"https://gitlab.pasteur.fr/dbikard/badSeed_public/raw/master/screen_data.csv\"\ncui2018data=pd.read_csv(cui2018data)\ncui2018data.head()\n\n\n\n\n\n\n\n\nguide\ngene\nessential\npos\nori\ncoding\nfit18\nfit75\nntargets\nseq\n\n\n\n\n0\nAAAAAACCTGCTGGTGAGGC\nNaN\nNaN\n2202483\n-\nNaN\n-4.850012\n-1.437546\n1\nAAAGCAGATCACAGTAAATAAAAAAACCTGCTGGTGAGGCAGGTTC...\n\n\n1\nAAAAAACGTATTCGCTTGCA\ncurA\nFalse\n1517891\n+\nFalse\n-0.094026\n-0.100313\n1\nTGTTGATGGCTACAGTGCTGAAAAAACGTATTCGCTTGCAAGGTTT...\n\n\n2\nAAAAAAGCGCACTTTTTGAC\nNaN\nNaN\n1919717\n+\nNaN\n-1.109310\n-0.246740\n1\nGTAACGCCTGACAGCGCACAAAAAAAGCGCACTTTTTGACTGGCAC...\n\n\n3\nAAAAAAGCGGTGACTTACGA\nbglA\nFalse\n3042929\n+\nFalse\n-1.328831\n-0.905068\n1\nGCGCCCATATCGAAGAGATGAAAAAAGCGGTGACTTACGATGGCGT...\n\n\n4\nAAAAAATCTGCCCGTGTCGT\ngyrA\nTrue\n2337231\n-\nFalse\n-0.840373\n-0.598858\n1\nATGACTGGAACAAAGCCTATAAAAAATCTGCCCGTGTCGTTGGTGA...\n\n\n\n\n\n\n\n\ng=gn.GenomeBrowser(fasta_path=fasta_path, \n                   gff_path=gff_path, \n                   bounds=(70000,110000),\n                   attributes=[\"gene\", \"locus_tag\", \"product\"],  \n                   search=False, \n                   show_seq=False,\n                   )\n\ntrack=g.add_track(height=100)\ntrack.scatter(data=cui2018data, pos=\"pos\", y=\"fit75\", factors=\"ori\", hover_data=[\"fit18\",\"guide\"])\n\ntrack2=g.add_track(height=100)\ntrack2.bar(data=cui2018data, pos=\"pos\", y=\"fit18\", factors=\"ori\", hover_data=[\"fit75\",\"guide\"])\ng.show()",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "examples.html#custom-tracks",
    "href": "examples.html#custom-tracks",
    "title": "Examples",
    "section": "Custom tracks",
    "text": "Custom tracks\ngenomeNotebook uses the Bokeh library. In the example below track.custom allows you to supply a function taking a simple Bokeh figure as an argument on which you can plot anything you want using Bokeh. Below we add a track with random points using Bokeh figure directly as a demonstration.\n\ng=gn.GenomeBrowser(gff_path=gff_path, \n                   bounds=(0,100000),\n                   attributes=[\"gene\", \"locus_tag\", \"product\"], \n                   search=False)\ntrack = g.add_track()\n\nx= np.arange(0,100000,100)\ny= np.random.randint(0,10,size=x.shape)\ntrack.custom(lambda fig: fig.scatter(x=x,y=y))\ng.show()",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "examples.html#highlighting-regions",
    "href": "examples.html#highlighting-regions",
    "title": "Examples",
    "section": "Highlighting regions",
    "text": "Highlighting regions\nYou can specify regions to highlight on the annotation track using the highlight function.\n\ng=gn.GenomeBrowser(gff_path=gff_path, bounds=(0,10000))\nhighlight_regions=pd.DataFrame({\"left\": [5000, 8000], \"right\": [6000, 8500], \"color\": [\"red\",\"green\"], \"y\":[23, 45]})\nhighlight_regions\n\n\n\n\n\n\n\n\nleft\nright\ncolor\ny\n\n\n\n\n0\n5000\n6000\nred\n23\n\n\n1\n8000\n8500\ngreen\n45\n\n\n\n\n\n\n\n\ng.highlight(data=highlight_regions, hover_data=[\"y\"])\ng.show()",
    "crumbs": [
      "Examples"
    ]
  },
  {
    "objectID": "examples.html#working-with-multiple-chromosomes-contigs",
    "href": "examples.html#working-with-multiple-chromosomes-contigs",
    "title": "Examples",
    "section": "Working with multiple chromosomes / contigs",
    "text": "Working with multiple chromosomes / contigs\nIf your GFF file contains several chromosomes or contigs, the sequence id of the contig you want to display can be specified using the seq_id argument. You can also display multiple contigs with synchronized panning using genomenotebook.GenomeStack, see Multi genbanck and stacking.\n\nimport itertools\nfrom Bio import SeqIO\n\n\nfasta_path = os.path.join(data_path, \"jmh43.fna\")\ngff_path = os.path.join(data_path, \"jmh43.gff\")\n\nfor rec in itertools.islice(SeqIO.parse(fasta_path,\"fasta\"),3):\n    print(rec.id)\n    g=gn.GenomeBrowser(gff_path=gff_path, \n                       fasta_path=fasta_path,\n                       seq_id=rec.id,\n                       attributes=[\"gene\", \"locus_tag\", \"product\"], \n                       feature_name=\"locus_tag\",\n                       search=False)\n    g.show()\n\nNZ_JAGURL010000100.1\n\n\n\n\n\n\n  \n\n\n\n\n\nNZ_JAGURL010000101.1\n\n\n\n\n\n\n  \n\n\n\n\n\nNZ_JAGURL010000102.1",
    "crumbs": [
      "Examples"
    ]
  }
]